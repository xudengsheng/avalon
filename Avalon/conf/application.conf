AVALON
	{
	akka {
	      stdout-loglevel = "OFF"
          loglevel = "OFF"
		  log-dead-letters = 10
		  log-dead-letters-during-shutdown = on
          akka.cluster.allow-weakly-up-members = on
          
		  actor {
		    provider = "akka.cluster.ClusterActorRefProvider"

		      serializers
				{
				  akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
				  akka-containers = "akka.remote.serialization.MessageContainerSerializer"
				  proto = "akka.remote.serialization.ProtobufSerializer"
				  daemon-create = "akka.remote.serialization.DaemonMsgCreateSerializer"
				}
				serialization-bindings
				{
				  "akka.cluster.ClusterMessage" = akka-cluster
				}
		 	 }



		  remote {
		  	enabled-transports = ["akka.remote.netty.tcp"]
		    log-remote-lifecycle-events = off
		    netty.tcp {
		      hostname = "192.168.19.127"
		      port = 2552
		    }

		        transport-failure-detector {
			      implementation-class = "akka.remote.DeadlineFailureDetector"
			      heartbeat-interval = 4 s
			      acceptable-heartbeat-pause = 10 s
			    }
		  }

			  cluster
			  {

			    seed-nodes = [
			      "akka.tcp://AVALON@192.168.18.84:2551",
			      "akka.tcp://AVALON@192.168.19.165:2551"]

			  	   roles = ["GAME"]
			 	   auto-down-unreachable-after = 10s
				  
				    sharding
				    {
					    guardian-name = sharding
					 	coordinator-failure-backoff = 10 s
					    role = ""
					    retry-interval = 2 s
					    buffer-size = 100000
					  	handoff-timeout = 60 s
						rebalance-interval = 10 s
					  	snapshot-interval = 3600 s
					 	least-shard-allocation-strategy {
					    rebalance-threshold = 10
					    max-simultaneous-rebalance = 3
					 }
				}

		  }

		  role ="master"


		}

	}
akka.extensions = ["akka.contrib.pattern.ClusterReceptionistExtension"]
akka.persistence.journal.plugin = "cassandra-journal"
akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
