AVALON
	{
	akka {

		  log-dead-letters = 10
		  log-dead-letters-during-shutdown = on
		  loggers = ["akka.event.slf4j.Slf4jLogger"]
		  loglevel = "DEBUG"
		  actor {
		    provider = "akka.cluster.ClusterActorRefProvider"

		      serializers
				{
				  akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
				  akka-containers = "akka.remote.serialization.MessageContainerSerializer"
				  proto = "akka.remote.serialization.ProtobufSerializer"
				  daemon-create = "akka.remote.serialization.DaemonMsgCreateSerializer"
				}
				serialization-bindings
				{
				  "akka.cluster.ClusterMessage" = akka-cluster
				}
		 	 }



		  remote {
		  	enabled-transports = ["akka.remote.netty.tcp"]
		    log-remote-lifecycle-events = off
		    netty.tcp {
		      hostname = "10.1.37.203"
		      port = 2551
		    }

		  }

			  cluster
			  {

			    seed-nodes = [
			      "akka.tcp://AVALON@10.1.37.203:2551",
			      "akka.tcp://AVALON@10.1.38.173:2552",
			      "akka.tcp://AVALON@10.1.7.163:2551",
			      "akka.tcp://AVALON@10.1.7.163:2552"]

			  	   roles = ["GAME","1"]
			 	   auto-down-unreachable-after = 10s
			   	   log-info = off

				    sharding
				    {
					    guardian-name = sharding
					 	coordinator-failure-backoff = 100 s
					    role = ""
					    retry-interval = 10 s
					    buffer-size = 100000
					  	handoff-timeout = 60 s
						rebalance-interval = 10 s
					  	snapshot-interval = 3600 s
					 	least-shard-allocation-strategy {
					    rebalance-threshold = 10
					    max-simultaneous-rebalance = 3
					 }

			  }

		  }

		  role ="master"


		}

	}
